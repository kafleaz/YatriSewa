@model TicketDetailsViewModel
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_NoFooterLayout.cshtml";
}
<!-- Ticket Details -->
    <div class="osahan-header-nav shadow-sm p-3 d-flex align-items-center bg-darkblue">
        <h5 class="font-weight-normal mb-0 text-white">
            <a asp-controller="Passenger" asp-action="HomePage" class="text-darkblue mr-3">
                <i class="icofont-rounded-left"></i>
            </a>
            Your Bookings
        </h5>
        <div class="ml-auto d-flex align-items-center">
            <a class="toggle osahan-toggle h4 m-0 text-white ml-auto" href="#">
                <i class="icofont-navigation-menu"></i>
            </a>
        </div>
    </div>
<div class="your-ticket p-3">
    <h5 class="mb-3 font-weight-bold text-dark">@Model.BusName - @Model.BusNumber</h5>
    <p class="text-success mb-3 font-weight-bold">COMPLETED</p>
    <div class="bg-white border border-warning rounded-1 shadow-sm p-3 mb-3">
        <div class="row mx-0 mb-3">
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">GOING FROM</small>
                <p class="small mb-0 l-hght-14">@Model.StartLocation</p>
            </div>
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">GOING TO</small>
                <p class="small mb-0 l-hght-14">@Model.EndLocation</p>
            </div>
        </div>
        <div class="row mx-0">
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">DATE OF JOURNEY</small>
                <p class="small mb-0 l-hght-14">@Model.DepartureTime.ToString("dd MMM yyyy")</p>
            </div>
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">YOU RATED</small>
                <p class="small mb-0 l-hght-14"><span class="icofont-star text-warning"></span> 3.5</p>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-1 d-flex shadow-sm p-3 mb-3 w-100">
        <div class="d-flex mx-0">
            <div class="col-12 p-0">
                <small class="text-danger mb-1 f-10 pr-1">PICKUP FROM</small>
                <p class="small mb-0 l-hght-14">@Model.PickupPoint</p>
            </div>
            <div class="col-12 p-0">
                <small class="text-danger mb-1 f-10 pr-1">DROPPING AT</small>
                <p class="small mb-0 l-hght-14">@Model.DropPoint</p>
            </div>
        </div>
    </div>
    <div class="list_item d-flex col-12 m-0 p-3 bg-white shadow-sm rounded-1 shadow-sm mb-3">
        <div class="d-flex w-100">
            <div class="bus_details w-100">
                <p class="mb-2 l-hght-18 font-weight-bold">View Boarding Location on Map</p>
                <div id="map" style="width: 100%; height: 400px; border-radius: 10px;"></div> <!-- Map container -->

                <div id="bus-details" style="margin-top: 20px;">
                    <h5>Bus Locator</h5>
                    @if (ViewBag.NoDeviceConnected != null && (bool)ViewBag.NoDeviceConnected)
                    {
                        <p style="font-size: 16px; color: red;">No IoT device connected for this bus.</p>

                    }
                    else
                    {
                        <div id="bus-info" style="margin-top: 10px; font-weight: bold;"></div>
                        <div id="eta-info" style="margin-top: 10px; font-weight: bold; color: green;">Calculating ETA...</div>

                    }
                </div>
            </div>
        </div>
    </div>
    

    @* <div class="list_item d-flex col-12 m-0 p-3 bg-white shadow-sm rounded-1 shadow-sm mb-3">
        <div class="d-flex mb-auto">
            <span class="icofont-location-pin h4"></span>
        </div>
        <div class="d-flex w-100">
            <div class="bus_details w-100 pl-3">
                <p class="mb-2 l-hght-18 font-weight-bold">View Boarding Location on Map</p>
                <div class="d-flex align-items-center mt-2">
                    <small class="text-muted mb-0 pr-1">Akshya Nagar 1st Block 1st Cross, Rammurthy<br>Nagar, Bangalore <br>560016</small>
                </div>
            </div>
        </div>
    </div> *@
    <div class="list_item d-flex col-12 m-0 mb-3 p-3 bg-white shadow-sm rounded-1 shadow-sm">
        <div class="d-flex mb-auto">
            <img src="data:image/png;base64,@ViewBag.QrCodeBase64" alt="QR Code" style="width: 100px; height: 100px;" />


        </div>
        <div class="d-flex w-100">
            <div class="bus_details w-100 pl-3">
                <p class="mb-2 l-hght-18 font-weight-bold">More Info</p>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">Passenger</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.PassengerName</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">Ticket Number</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.TicketNumber</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">PNR Number</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.PNR</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center mt-3">
                    <p class="mb-0 pr-1 font-weight-bold">Amount Paid</p>
                    <p class="mb-0 ml-auto l-hght-14 text-danger font-weight-bold">Rs. @Model.TotalAmount</p>
                </div>
            </div>
        </div>
    </div>
<div class="bg-white rounded-1 shadow-sm p-3 w-100">
    <div>
        <div>
            <p class="text-justify">
                Cancellation Policies,<br>
                1. Get a minimum 50% refund if you cancel at least 12 hours before the departure.<br>
                2. Individual tickets can be canceled from multiple ticket bookings.<br>
                3. Cancellation charges:<br>
                &nbsp;&nbsp;Before 48 hours: 10%<br>
                &nbsp;&nbsp;Before 24 hours: 25%<br>
                &nbsp;&nbsp;Before 12 hours: 50%<br>
                &nbsp;&nbsp;After 12 hours: 100%<br>
            </p>
        </div>
    <form id="refundForm">
        @if (ViewBag.BookingId != null)
        {
                    <input type="hidden" id="bookingId" value="@ViewBag.BookingId" />
                    <input type="hidden" id="ticketId" value="@ViewBag.TicketId" />
        }
        else
        {
                    <script>console.error("⚠️ Error: ViewBag.BookingId is NULL! Check the controller.");</script>
        }
                <button type="button" id="refundButton" class="btn btn-danger">Cancel Ticket</button>
            </form>
    </div>
</div>
</div>
<!-- Download Ticket -->
<div class="pb-3 pt-0 px-3">
    <div class="footer-menu row m-0 px-1 bg-white shadow rounded-2">
        <div class="col-6 p-0 text-center">
            <a href="@Url.Action("DownloadTicket", "Passenger", new { bookingId = ViewBag.BookingId })" class="btn home text-danger py-3">
                <span class="icofont-file-pdf h5"></span>
                <p class="mb-0 small">Download Ticket</p>   
            </a>
        </div>
        <div class="col-6 p-0 text-center">
            <a href="#" class="home text-muted ">
                <span class="icofont-share h5"></span>
                <p class="mb-0 text-muted small">Share Ticket</p>
            </a>
        </div>
    </div>
</div>

<style>
    #map {
        width: 100%;
        height: 500px;
    }
</style>
<style>
    .bus-marker {
        border-radius: 50%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }
</style>

 <script>
    document.addEventListener("DOMContentLoaded", function () {
        var refundButton = document.getElementById("refundButton");

        if (!refundButton) {
            console.error("⚠️ Error: Refund button not found in DOM.");
            return;
        }

        refundButton.addEventListener("click", function () {
            requestStripeRefund();
        });
    });

    function requestStripeRefund() {
        var bookingIdElement = document.getElementById("bookingId");
        var ticketIdElement = document.getElementById("ticketId");

        if (!bookingIdElement) {
            console.error("⚠️ Error: #bookingId element not found in DOM.");
            return;
        }

        if (!ticketIdElement) {
            console.error("⚠️ Error: #ticketId element not found in DOM.");
            return;
        }

        var bookingId = bookingIdElement.value;
        var ticketId = ticketIdElement.value;

        console.log("🔍 Refund Request Booking ID:", bookingId);
        console.log("🔍 Refund Request Ticket ID:", ticketId);

        fetch('/PaymentRefund/ProcessStripeRefund', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ bookingId: parseInt(bookingId), ticketId: parseInt(ticketId) })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                console.log("✅ Refund processed successfully.");
            } else {
                console.error("❌ Refund failed:", data.message);
            }
        })
        .catch(error => console.error("❌ Refund Request Error:", error));
    }
</script>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>


 <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet" /> 
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/1.1.4/signalr.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/signalr/1.1.4/signalr.min.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>


<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>


<script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet.js"></script>
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" />
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>

<div id="bus-info" style="margin-top: 10px; font-weight: bold;"></div>


<script>
    document.addEventListener("DOMContentLoaded", async function () {
        const startCoords = [@ViewBag.StartLatitude, @ViewBag.StartLongitude];
        const endCoords = [@ViewBag.EndLatitude, @ViewBag.EndLongitude];
        const stops = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.Stops))');
        const deviceIdentifier = '@Model.DeviceIdentifier';

        let routePolyline, busMarker, passengerMarker, isMapCentered = false;

        // ✅ Mapbox API Key
        const accessToken = 'pk.eyJ1IjoiYXprYWZsZSIsImEiOiJjbTMxb3c3a3EwdzJ1MndxczJ3M3NoN2NhIn0.xgiZhvVHJtJTZy0Sxwm2Zg';

        // ✅ Initialize Leaflet map
        const map = L.map('map').setView(startCoords, 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // ✅ Add Start & End Markers
        L.marker(startCoords).addTo(map).bindPopup('Start Location').openPopup();
        L.marker(endCoords).addTo(map).bindPopup('End Location');

        // 🟢 Bus Marker (Green Circle)
        busMarker = L.circleMarker(startCoords, {
            color: 'green',
            radius: 8,
            fillColor: 'green',
            fillOpacity: 0.9
        }).addTo(map);

        // 🟡 Passenger Marker (Yellow Circle)
        passengerMarker = L.circleMarker(startCoords, {
            color: 'yellow',
            radius: 8,
            fillColor: 'yellow',
            fillOpacity: 0.9
        }).addTo(map);

        // ✅ Function to Fetch Stops & Display Markers
        async function getStopCoordinates() {
            let waypointCoords = [];
            for (let stop of stops) {
                try {
                    let response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(stop)}`);
                    let data = await response.json();
                    if (data.length > 0) {
                        let lat = parseFloat(data[0].lat);
                        let lon = parseFloat(data[0].lon);
                        waypointCoords.push([lat, lon]);
                        L.marker([lat, lon]).addTo(map).bindPopup(`Stop: ${stop}`);
                    } else {
                        console.warn(`⚠️ No coordinates found for stop: ${stop}`);
                    }
                } catch (error) {
                    console.error(`❌ Error fetching coordinates for stop: ${stop}`, error);
                }
            }
            return waypointCoords;
        }

        // ✅ Function to Draw the Route Using Mapbox Directions API
        async function drawFullRoute() {
            const waypointCoords = await getStopCoordinates();
            if (waypointCoords.length === 0) {
                console.warn("⚠️ No valid stop coordinates found.");
                return;
            }

            const routePath = [startCoords, ...waypointCoords, endCoords];
            const coordString = routePath.map(coord => `${coord[1]},${coord[0]}`).join(';');

            // 🔹 Fetch Route from Mapbox Directions API
            const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${coordString}?access_token=${accessToken}&geometries=geojson&steps=true`;

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.routes?.length > 0) {
                    const coordinates = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);
                    if (routePolyline) map.removeLayer(routePolyline);
                    routePolyline = L.polyline(coordinates, { color: 'blue', weight: 5 }).addTo(map);
                    map.fitBounds(routePolyline.getBounds());

                    console.log("✅ Route drawn successfully using Mapbox Directions API.");
                } else {
                    console.warn("⚠️ No valid route data found.");
                }
            } catch (error) {
                console.error("❌ Error fetching route:", error);
            }
        }

        // ✅ Get Passenger Location from GPS & Snap to Route
        function getPassengerLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(async (position) => {
                    const passengerCoords = [position.coords.latitude, position.coords.longitude];

                    // 🟡 Update Passenger Marker Position
                    passengerMarker.setLatLng(passengerCoords);
                    map.setView(passengerCoords, 12);

                    // Snap to nearest route point
                    const nearestPoint = await snapToRoute(passengerCoords);
                    passengerMarker.setLatLng(nearestPoint);
                });
            } else {
                console.warn("⚠️ Geolocation is not supported.");
            }
        }

        // ✅ Snap Any Point to the Nearest Route Location
        async function snapToRoute(point) {
            const url = `https://api.mapbox.com/matching/v5/mapbox/driving/${point[1]},${point[0]}?access_token=${accessToken}`;
            try {
                const response = await fetch(url);
                const data = await response.json();
                if (data.matchings?.length > 0) {
                    return data.matchings[0].geometry.coordinates[0].reverse();
                }
            } catch (error) {
                console.error("❌ Error snapping to route:", error);
            }
            return point;
        }

        // ✅ Calculate ETA Based on Route Distance
        async function calculateETA(busCoords) {
            const passengerCoords = passengerMarker.getLatLng();
            const coordString = `${busCoords[1]},${busCoords[0]};${passengerCoords.lng},${passengerCoords.lat}`;

            const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${coordString}?access_token=${accessToken}&geometries=geojson`;

            try {
                const response = await fetch(url);
                const data = await response.json();
                if (data.routes?.length > 0) {
                    const duration = data.routes[0].duration / 60; // Convert to minutes
                    document.getElementById("eta-info").innerHTML = `ETA: ${Math.round(duration)} mins`;
                }
            } catch (error) {
                console.error("❌ Error calculating ETA:", error);
            }
        }

        // ✅ SignalR Event Listener for Live Bus Location Updates
        const connection = new signalR.HubConnectionBuilder().withUrl("/busLocationHub").build();
        connection.start().then(() => {
            console.log("✅ SignalR connection established.");
            connection.invoke("JoinGroup", deviceIdentifier).catch(err => console.error("❌ Error joining group:", err));
        }).catch(err => console.error("❌ Error starting SignalR connection:", err));

        connection.on("UpdateBusLocation", async (updatedDeviceIdentifier, busName, latitude, longitude, speed) => {
            if (updatedDeviceIdentifier === deviceIdentifier) {
                const busCoords = [latitude, longitude];

                // 🟢 Update Bus Marker Position
                busMarker.setLatLng(busCoords);

                // Calculate ETA
                await calculateETA(busCoords);
            }
        });

        // ✅ Start Process
        drawFullRoute();
        getPassengerLocation();
    });
</script>





@* =====================================working===========================
    <script>
    document.addEventListener("DOMContentLoaded", async function () {
        const startCoords = [@ViewBag.StartLatitude, @ViewBag.StartLongitude];
        const endCoords = [@ViewBag.EndLatitude, @ViewBag.EndLongitude];
        const stops = JSON.parse('@Html.Raw(Json.Serialize(ViewBag.Stops))');
        const deviceIdentifier = '@Model.DeviceIdentifier';

        let routePolyline, busMarker, isMapCentered = false;

        // ✅ Ensure Mapbox API Key is set
        const accessToken = 'pk.eyJ1IjoiYXprYWZsZSIsImEiOiJjbTMxb3c3a3EwdzJ1MndxczJ3M3NoN2NhIn0.xgiZhvVHJtJTZy0Sxwm2Zg';

        // ✅ Initialize Leaflet map AFTER DOM is ready
        const map = L.map('map').setView(startCoords, 10);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; OpenStreetMap contributors'
        }).addTo(map);

        // ✅ Add start and end markers
        L.marker(startCoords).addTo(map).bindPopup('Start Location').openPopup();
        L.marker(endCoords).addTo(map).bindPopup('End Location');

        // ✅ Function to Fetch Stops & Display Markers
        async function getStopCoordinates() {
            let waypointCoords = [];
            for (let stop of stops) {
                try {
                    let response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(stop)}`);
                    let data = await response.json();
                    if (data.length > 0) {
                        let lat = parseFloat(data[0].lat);
                        let lon = parseFloat(data[0].lon);
                        waypointCoords.push([lat, lon]);
                        L.marker([lat, lon]).addTo(map).bindPopup(`Stop: ${stop}`);
                    } else {
                        console.warn(`⚠️ No coordinates found for stop: ${stop}`);
                    }
                } catch (error) {
                    console.error(`❌ Error fetching coordinates for stop: ${stop}`, error);
                }
            }
            return waypointCoords;
        }

        // ✅ Function to Draw the Route Using Mapbox Directions API
        async function drawFullRoute() {
            const waypointCoords = await getStopCoordinates();

            if (waypointCoords.length === 0) {
                console.warn("⚠️ No valid stop coordinates found.");
                return;
            }

            // Construct route path (start, stops, end)
            const routePath = [startCoords, ...waypointCoords, endCoords];

            // Ensure coordinates are formatted correctly for Mapbox
            const coordString = routePath.map(coord => `${coord[1]},${coord[0]}`).join(';');

            // 🔹 Use Mapbox Directions API for better road mapping
            const url = `https://api.mapbox.com/directions/v5/mapbox/driving/${coordString}?access_token=${accessToken}&geometries=geojson&steps=true`;

            console.log("🔗 Fetching route from:", url);

            try {
                const response = await fetch(url);
                const data = await response.json();

                if (data.routes?.length > 0) {
                    const coordinates = data.routes[0].geometry.coordinates.map(coord => [coord[1], coord[0]]);
                    if (routePolyline) map.removeLayer(routePolyline);
                    routePolyline = L.polyline(coordinates, { color: 'blue', weight: 5 }).addTo(map);
                    map.fitBounds(routePolyline.getBounds());

                    console.log("✅ Route drawn successfully using Mapbox Directions API.");
                } else {
                    console.warn("⚠️ No valid route data found.");
                }
            } catch (error) {
                console.error("❌ Error fetching route:", error);
            }
        }

        // ✅ Call function to draw the route
        drawFullRoute();
    });
</script>
 *@

