@model TicketDetailsViewModel
@{
    ViewData["Title"] = "Home Page";
    Layout = "~/Views/Shared/_NoFooterLayout.cshtml";
}
<!-- Ticket Details -->
    <div class="osahan-header-nav shadow-sm p-3 d-flex align-items-center bg-darkblue">
        <h5 class="font-weight-normal mb-0 text-white">
            <a asp-controller="Passenger" asp-action="HomePage" class="text-darkblue mr-3">
                <i class="icofont-rounded-left"></i>
            </a>
            Your Bookings
        </h5>
        <div class="ml-auto d-flex align-items-center">
            <a class="toggle osahan-toggle h4 m-0 text-white ml-auto" href="#">
                <i class="icofont-navigation-menu"></i>
            </a>
        </div>
    </div>
<div class="your-ticket p-3">
    <h5 class="mb-3 font-weight-bold text-dark">@Model.BusName - @Model.BusNumber</h5>
    <p class="text-success mb-3 font-weight-bold">COMPLETED</p>
    <div class="bg-white border border-warning rounded-1 shadow-sm p-3 mb-3">
        <div class="row mx-0 mb-3">
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">GOING FROM</small>
                <p class="small mb-0 l-hght-14">@Model.StartLocation</p>
            </div>
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">GOING TO</small>
                <p class="small mb-0 l-hght-14">@Model.EndLocation</p>
            </div>
        </div>
        <div class="row mx-0">
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">DATE OF JOURNEY</small>
                <p class="small mb-0 l-hght-14">@Model.DepartureTime.ToString("dd MMM yyyy")</p>
            </div>
            <div class="col-6 p-0">
                <small class="text-muted mb-1 f-10 pr-1">YOU RATED</small>
                <p class="small mb-0 l-hght-14"><span class="icofont-star text-warning"></span> 3.5</p>
            </div>
        </div>
    </div>
    <div class="bg-white rounded-1 d-flex shadow-sm p-3 mb-3 w-100">
        <div class="d-flex mx-0">
            <div class="col-12 p-0">
                <small class="text-danger mb-1 f-10 pr-1">PICKUP FROM</small>
                <p class="small mb-0 l-hght-14">@Model.PickupPoint</p>
            </div>
            <div class="col-12 p-0">
                <small class="text-danger mb-1 f-10 pr-1">DROPPING AT</small>
                <p class="small mb-0 l-hght-14">@Model.DropPoint</p>
            </div>
        </div>
    </div>
    <div class="list_item d-flex col-12 m-0 p-3 bg-white shadow-sm rounded-1 shadow-sm mb-3">
        <div class="d-flex w-100">
            <div class="bus_details w-100">
                <p class="mb-2 l-hght-18 font-weight-bold">View Boarding Location on Map</p>
                <div id="map" style="width: 100%; height: 400px; border-radius: 10px;"></div> <!-- Map container -->

                <div id="bus-details" style="margin-top: 20px;">
                    <h5>Bus Locator</h5>
                    @if (ViewBag.NoDeviceConnected != null && (bool)ViewBag.NoDeviceConnected)
                    {
                        <p style="font-size: 16px; color: red;">No IoT device connected for this bus.</p>
                    }
                    else
                    {
                        <p id="bus-info" style="font-size: 16px;">Waiting for updates...</p>
                    }
                </div>
            </div>
        </div>
    </div>
    

    @* <div class="list_item d-flex col-12 m-0 p-3 bg-white shadow-sm rounded-1 shadow-sm mb-3">
        <div class="d-flex mb-auto">
            <span class="icofont-location-pin h4"></span>
        </div>
        <div class="d-flex w-100">
            <div class="bus_details w-100 pl-3">
                <p class="mb-2 l-hght-18 font-weight-bold">View Boarding Location on Map</p>
                <div class="d-flex align-items-center mt-2">
                    <small class="text-muted mb-0 pr-1">Akshya Nagar 1st Block 1st Cross, Rammurthy<br>Nagar, Bangalore <br>560016</small>
                </div>
            </div>
        </div>
    </div> *@
    <div class="list_item d-flex col-12 m-0 mb-3 p-3 bg-white shadow-sm rounded-1 shadow-sm">
        <div class="d-flex mb-auto">
            <img src="img/qr-code.png" class="img-fluid osahan-qr">
        </div>
        <div class="d-flex w-100">
            <div class="bus_details w-100 pl-3">
                <p class="mb-2 l-hght-18 font-weight-bold">More Info</p>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">Passenger</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.PassengerName</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">Ticket Number</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.TicketNumber</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center my-2">
                    <small class="text-muted mb-0 pr-1">PNR Number</small>
                    <p class="small mb-0 ml-auto l-hght-14">@Model.PNR</p>
                </div>
                <div class="l-hght-10 d-flex align-items-center mt-3">
                    <p class="mb-0 pr-1 font-weight-bold">Amount Paid</p>
                    <p class="mb-0 ml-auto l-hght-14 text-danger font-weight-bold">$@Model.TotalAmount</p>
                </div>
            </div>
        </div>
    </div>
<div class="bg-white rounded-1 shadow-sm p-3 w-100">
    <div>
    <form id="refundForm">
        @if (ViewBag.BookingId != null)
        {
                    <input type="hidden" id="bookingId" value="@ViewBag.BookingId" />
                    <input type="hidden" id="ticketId" value="@ViewBag.TicketId" />
        }
        else
        {
                    <script>console.error("⚠️ Error: ViewBag.BookingId is NULL! Check the controller.");</script>
        }
                <button type="button" id="refundButton" class="btn btn-danger">Request Refund</button>
            </form>
    </div>
</div>
</div>
<!-- Download Ticket -->
<div class="pb-3 pt-0 px-3">
    <div class="footer-menu row m-0 px-1 bg-white shadow rounded-2">
        <div class="col-6 p-0 text-center">
            <a href="#" class="home text-danger py-3">
                <span class="icofont-file-pdf h5"></span>
                <p class="mb-0 small">Download Pdf</p>
            </a>
        </div>
        <div class="col-6 p-0 text-center">
            <a href="#" class="home text-danger">
                <span class="icofont-share h5"></span>
                <p class="mb-0 small">Share Ticket</p>
            </a>
        </div>
    </div>
</div>
<style>
    #map {
        width: 100%;
        height: 500px;
    }
</style>

@* <script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet" />
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>
<script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet" />
<script>
        mapboxgl.accessToken = 'pk.eyJ1IjoiYXprYWZsZSIsImEiOiJjbTMxb3c3a3EwdzJ1MndxczJ3M3NoN2NhIn0.xgiZhvVHJtJTZy0Sxwm2Zg';


    // Initialize the map
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        // center: [84.1240, 28.3949], // Default center
        zoom: 10,
    });
    let isMapCentered = false;
    const markers = {};

    // Connect to the SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/busLocationHub")
        .build();

        // Handle location updates
    connection.on("UpdateBusLocation", (deviceIdentifier, latitude, longitude, speed) => {
        console.log(`Bus ${deviceIdentifier} updated: [${latitude}, ${longitude}] at ${speed} km/h`);

        if (!markers[deviceIdentifier]) {
            // Create a custom marker element
            const busIcon = document.createElement('div');
            busIcon.className = 'bus-marker';
            busIcon.style.backgroundImage = "url('/img/gps.png')"; // Path to the bus icon
            busIcon.style.width = '40px';
            busIcon.style.height = '40px';
            busIcon.style.backgroundSize = 'cover';

            // Create a Mapbox marker with the custom element
            markers[deviceIdentifier] = new mapboxgl.Marker({
                element: busIcon,
            })
                .setLngLat([longitude, latitude])
                .addTo(map);
        } else {
            markers[deviceIdentifier].setLngLat([longitude, latitude]);
        }

            // Center the map on the first update
        if (!isMapCentered) {
            map.setCenter([longitude, latitude]); // Center map dynamically
            isMapCentered = true;
        }
        // Update bus info display
        document.getElementById("bus-info").textContent = `Bus ${deviceIdentifier} is moving at ${speed} km/h.`;
    });

    // Start the connection
    connection.start()
        .then(() => console.log("SignalR connection established"))
        .catch(err => console.error("Error starting SignalR connection:", err));
</script> *@
<script>
    document.addEventListener("DOMContentLoaded", function () {
        var refundButton = document.getElementById("refundButton");

        if (!refundButton) {
            console.error("⚠️ Error: Refund button not found in DOM.");
            return;
        }

        refundButton.addEventListener("click", function () {
            requestStripeRefund();
        });
    });

    function requestStripeRefund() {
        var bookingIdElement = document.getElementById("bookingId");
        var ticketIdElement = document.getElementById("ticketId");

        if (!bookingIdElement) {
            console.error("⚠️ Error: #bookingId element not found in DOM.");
            return;
        }

        if (!ticketIdElement) {
            console.error("⚠️ Error: #ticketId element not found in DOM.");
            return;
        }

        var bookingId = bookingIdElement.value;
        var ticketId = ticketIdElement.value;

        console.log("🔍 Refund Request Booking ID:", bookingId);
        console.log("🔍 Refund Request Ticket ID:", ticketId);

        fetch('/PaymentRefund/ProcessStripeRefund', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ bookingId: parseInt(bookingId), ticketId: parseInt(ticketId) })
        })
        .then(response => response.json())
        .then(data => {
            alert(data.message);
            if (data.success) {
                console.log("✅ Refund processed successfully.");
            } else {
                console.error("❌ Refund failed:", data.message);
            }
        })
        .catch(error => console.error("❌ Refund Request Error:", error));
    }
</script>



<script src="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v2.14.1/mapbox-gl.css" rel="stylesheet" />
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-app-compat.js"></script>
<script src="https://www.gstatic.com/firebasejs/9.6.1/firebase-database-compat.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.15/signalr.min.js"></script>

<script>
    mapboxgl.accessToken = 'pk.eyJ1IjoiYXprYWZsZSIsImEiOiJjbTMxb3c3a3EwdzJ1MndxczJ3M3NoN2NhIn0.xgiZhvVHJtJTZy0Sxwm2Zg';

    const deviceIdentifier = '@Model.DeviceIdentifier'; // Razor model passing the device identifier
    let isMapCentered = false;
    const markers = {};

    const latitude = @((Model.Latitude ?? 27.7614M).ToString("G", System.Globalization.CultureInfo.InvariantCulture));
    const longitude = @((Model.Longitude ?? 85.3156M).ToString("G", System.Globalization.CultureInfo.InvariantCulture));


    // Initialize the map
    const map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/mapbox/streets-v11',
        center: [longitude, latitude],
        zoom: 10
    });

    // Connect to the SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/busLocationHub")
        .build();

    // Start the connection and join the group for the specific device
    connection.start()
        .then(() => {
            console.log("SignalR connection established");
            connection.invoke("JoinGroup", deviceIdentifier)
                .then(() => console.log(`Joined group for device: ${deviceIdentifier}`))
                .catch(err => console.error("Error joining group:", err));
        })
        .catch(err => console.error("Error starting SignalR connection:", err));

    // Handle location updates for the specific device
    connection.on("UpdateBusLocation", (updatedDeviceIdentifier, latitude, longitude, speed) => {
        if (updatedDeviceIdentifier === deviceIdentifier) {
            console.log(`Bus ${updatedDeviceIdentifier} updated: [${latitude}, ${longitude}] at ${speed} km/h`);

            if (!markers[updatedDeviceIdentifier]) {
                // Create a custom marker element for the bus
                const busIcon = document.createElement('div');
                busIcon.className = 'bus-marker';
                busIcon.style.backgroundImage = "url('/img/gps.png')";
                busIcon.style.width = '40px';
                busIcon.style.height = '40px';
                busIcon.style.backgroundSize = 'cover';

                markers[updatedDeviceIdentifier] = new mapboxgl.Marker({
                    element: busIcon
                }).setLngLat([longitude, latitude]).addTo(map);
            } else {
                markers[updatedDeviceIdentifier].setLngLat([longitude, latitude]);
            }

            // Center the map on the first update
            if (!isMapCentered) {
                map.setCenter([longitude, latitude]);
                isMapCentered = true;
            }

            // Update the bus info display
            document.getElementById("bus-info").textContent = `Bus ${updatedDeviceIdentifier} is moving at ${speed} km/h.`;
        }
    });

    // Handle disconnection and reconnection
    connection.onclose(async () => {
        console.log("Connection lost. Reconnecting...");
        try {
            await connection.start();
            connection.invoke("JoinGroup", deviceIdentifier);
            console.log(`Reconnected and joined group for device: ${deviceIdentifier}`);
        } catch (err) {
            console.error("Reconnection failed:", err);
        }
    });
</script>


<style>
    .bus-marker {
        border-radius: 50%;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

</style>